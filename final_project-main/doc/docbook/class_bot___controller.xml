<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="class_bot___controller">
<title>Bot_Controller class Reference</title>
<para>
    <programlisting>#include <link linkend="bot__controller_8h">&lt;bot_controller.h&gt;</link></programlisting>
</para>
<para>Inheritance diagram for Bot_Controller</para>
<para>
    <figure>
        <title>Inheritance graph</title>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="1" fileref="class_bot___controller__inherit__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </figure>
</para>
<para>Collaboration diagram for Bot_Controller</para>
<para>
    <figure>
        <title>Collaboration graph</title>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="1" fileref="class_bot___controller__coll__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </figure>
</para>
        <section>
            <title>Public Attributes</title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>std::array&lt; int, 4 &gt; m_fid</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>std::array&lt; std::array&lt; double, 2 &gt;, 4 &gt; m_posit</para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        <section>
            <title>Protected Attributes</title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>ros::NodeHandle m_nh</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>ros::Subscriber m_pose_subscriber</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>ros::Subscriber m_scan_subscriber</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>ros::Subscriber m_fiducial_subscriber</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>ros::Publisher m_velocity_publisher</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>ros::Publisher m_bot_status_publisher</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>std::string m_robot_name</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>double m_kv</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>double m_kh</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>std::string m_parent_frame</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>std::string m_child_frame</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>std::pair&lt; double, double &gt; m_location</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>geometry_msgs::Quaternion m_orientation</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>double m_linear_speed</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>double m_angular_speed</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>double m_roll</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>double m_pitch</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>double m_yaw</para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        <section>
            <title></title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para> <link linkend="class_bot___controller_1a05104e1b41f7c9cd9cdfe80bbbd53a7d">Bot_Controller</link> (
ros::NodeHandle * nodehandle, const std::string &amp; robot_name)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual void <link linkend="class_bot___controller_1ae357ee9ea3ec7a5000f39532fc52fa72">publish_velocities</link> (
const geometry_msgs::Twist &amp; msg)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual void <link linkend="class_bot___controller_1afff936a963b8b3b4b641a7f152b45166">drive_straight</link> (
double distance, bool direction)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual void <link linkend="class_bot___controller_1a19ba7ced629e4ee9a0743efdef4a5cc7">rotate</link> (
double angle_to_rotate, bool direction, double final_angle)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual bool <link linkend="class_bot___controller_1a5e2f980d71dab69d952c532b5819483b">go_to_goal</link> (
double x, double y)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual void <link linkend="class_bot___controller_1a28d1caa8c0ed9d8fb313caacecc5e71b">stop</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual double <link linkend="class_bot___controller_1a836b1e434c1c15ccec0b81313a32aca8">compute_expected_final_yaw</link> (
bool direction, double angle_to_rotate)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual double <link linkend="class_bot___controller_1abda61292c3719a4a5676ddcd0d8311a1">compute_yaw_deg</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual double <link linkend="class_bot___controller_1a362541183536f955e54234e14f18f3c2">compute_yaw_rad</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual double <link linkend="class_bot___controller_1a722a49277ba04f303ca588d80a4910c3">convert_rad_to_deg</link> (
double angle)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>const double <link linkend="class_bot___controller_1a2efd33efbb2d3c8caa52e04a049b5971">get_current_x</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>const double <link linkend="class_bot___controller_1a5985b03ff6787846a5abf5cd85ed6ae2">get_current_y</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        <section>
            <title></title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_bot___controller_1acc77fd887b8ddc97431a33f3cf72e82c">m_pose_callback</link> (
const nav_msgs::Odometry::ConstPtr &amp; msg)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_bot___controller_1ae7a0c2b3a9a5adc3464dc581003c3ce1">m_scan_callback</link> (
const sensor_msgs::LaserScan::ConstPtr &amp; msg)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_bot___controller_1affa0d8469972f97d731d72c8654a9f90">m_fiducial_callback</link> (
const fiducial_msgs::FiducialTransformArray::ConstPtr &amp; msg)<para><emphasis>To store the locations of the fiducial IDs (waypoints) and the fiducial_ID number.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_bot___controller_1a90bb076f647b36f2cf5b5e57ae98ce41">m_initialize_subscribers</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_bot___controller_1ab8d1e3dd6aced881ebcc76e32aaf0910">m_initialize_publishers</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>double <link linkend="class_bot___controller_1ac099bee38ac176cc8de6a6f78581eaa1">m_compute_distance</link> (
const std::pair&lt; double, double &gt; &amp; a, const std::pair&lt; double, double &gt; &amp; b)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_bot___controller_1a2e53992a4bdea36f745569bfe0035916">m_move</link> (
double linear, double angular)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>double <link linkend="class_bot___controller_1a622aa7b81b1bed82ab5478c7bd9ddd07">m_normalize_angle_positive</link> (
double angle)<para><emphasis>Normalizes the angle to be 0 to 2*M_PI.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>double <link linkend="class_bot___controller_1a234205057d0671c04b143ec5f794741c">m_normalize_angle</link> (
double angle)<para><emphasis>Normalizes the angle to be -M_PI circle to +M_PI circle.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
    <simplesect>

<para>Controller class to drive a turtlebot. </para>
    </simplesect>
        <section>
            <title>Member Data Documentation</title>
        </section>
        <section>
            <title>Member Data Documentation</title>
        </section>
            <section xml:id="class_bot___controller_1a05104e1b41f7c9cd9cdfe80bbbd53a7d">
                <title>Bot_Controller::Bot_Controller (ros::NodeHandle *nodehandle, const std::string &amp;robot_name)</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_bot___controller_1ae357ee9ea3ec7a5000f39532fc52fa72">
                <title>virtual void Bot_Controller::publish_velocities (const geometry_msgs::Twist &amp;msg)=0</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_bot___controller_1afff936a963b8b3b4b641a7f152b45166">
                <title>void Bot_Controller::drive_straight (double distance, bool direction)=0</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_bot___controller_1a19ba7ced629e4ee9a0743efdef4a5cc7">
                <title>void Bot_Controller::rotate (double angle_to_rotate, bool direction, double final_angle)=0</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_bot___controller_1a5e2f980d71dab69d952c532b5819483b">
                <title>bool Bot_Controller::go_to_goal (double x, double y)=0</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_bot___controller_1a28d1caa8c0ed9d8fb313caacecc5e71b">
                <title>void Bot_Controller::stop ()=0</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_bot___controller_1a836b1e434c1c15ccec0b81313a32aca8">
                <title>double Bot_Controller::compute_expected_final_yaw (bool direction, double angle_to_rotate)=0</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_bot___controller_1abda61292c3719a4a5676ddcd0d8311a1">
                <title>double Bot_Controller::compute_yaw_deg ()=0</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_bot___controller_1a362541183536f955e54234e14f18f3c2">
                <title>double Bot_Controller::compute_yaw_rad ()=0</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_bot___controller_1a722a49277ba04f303ca588d80a4910c3">
                <title>double Bot_Controller::convert_rad_to_deg (double angle)=0</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_bot___controller_1a2efd33efbb2d3c8caa52e04a049b5971">
                <title>const double Bot_Controller::get_current_x ()</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_bot___controller_1a5985b03ff6787846a5abf5cd85ed6ae2">
                <title>const double Bot_Controller::get_current_y ()</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_bot___controller_1acc77fd887b8ddc97431a33f3cf72e82c">
                <title>void Bot_Controller::m_pose_callback (const nav_msgs::Odometry::ConstPtr &amp;msg)</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_bot___controller_1ae7a0c2b3a9a5adc3464dc581003c3ce1">
                <title>void Bot_Controller::m_scan_callback (const sensor_msgs::LaserScan::ConstPtr &amp;msg)</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_bot___controller_1affa0d8469972f97d731d72c8654a9f90">
                <title>void Bot_Controller::m_fiducial_callback (const fiducial_msgs::FiducialTransformArray::ConstPtr &amp;msg)</title> <emphasis>To store the locations of the fiducial IDs (waypoints) and the fiducial_ID number.</emphasis>
                
<para>
                <formalpara>
                    <title/>
                    <table frame="all">
                        <title>Parameters                        </title>
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>msg</entry>
                                <entry>
<para></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                </formalpara>
                </para>

            </section>
            <section xml:id="class_bot___controller_1a90bb076f647b36f2cf5b5e57ae98ce41">
                <title>void Bot_Controller::m_initialize_subscribers ()</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_bot___controller_1ab8d1e3dd6aced881ebcc76e32aaf0910">
                <title>void Bot_Controller::m_initialize_publishers ()</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_bot___controller_1ac099bee38ac176cc8de6a6f78581eaa1">
                <title>double Bot_Controller::m_compute_distance (const std::pair&lt; double, double &gt; &amp;a, const std::pair&lt; double, double &gt; &amp;b)</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_bot___controller_1a2e53992a4bdea36f745569bfe0035916">
                <title>void Bot_Controller::m_move (double linear, double angular)</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_bot___controller_1a622aa7b81b1bed82ab5478c7bd9ddd07">
                <title>double Bot_Controller::m_normalize_angle_positive (double angle)</title> <emphasis>Normalizes the angle to be 0 to 2*M_PI.</emphasis>
                
<para>
                <formalpara>
                    <title/>
                    <table frame="all">
                        <title>Parameters                        </title>
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>angle</entry>
                                <entry>
<para>Angle to normalize (rad) </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                </formalpara>
                <formalpara><title>Returns: </title>

<para>double Normalized angle (rad) </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_bot___controller_1a234205057d0671c04b143ec5f794741c">
                <title>double Bot_Controller::m_normalize_angle (double angle)</title> <emphasis>Normalizes the angle to be -M_PI circle to +M_PI circle.</emphasis>
                
<para>
                <formalpara>
                    <title/>
                    <table frame="all">
                        <title>Parameters                        </title>
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>angle</entry>
                                <entry>
<para>Angle to normalize (rad) </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                </formalpara>
                <formalpara><title>Returns: </title>

<para>double Normalized angle (rad) </para>
</formalpara>
</para>

            </section>
</section>
