<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="class_bot_action_server">
<title>BotActionServer class Reference</title>
<para>
    <programlisting>#include <link linkend="bot__action__server_8h">&lt;bot_action_server.h&gt;</link></programlisting>
</para>
<para>Inheritance diagram for BotActionServer</para>
<para>
    <figure>
        <title>Inheritance graph</title>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="1" fileref="class_bot_action_server__inherit__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </figure>
</para>
<para>Collaboration diagram for BotActionServer</para>
<para>
    <figure>
        <title>Collaboration graph</title>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="1" fileref="class_bot_action_server__coll__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </figure>
</para>
        <section>
            <title>Private Attributes</title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>ros::NodeHandle m_nh</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>std::string m_robot_name</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>ros::Publisher m_velocity_publisher</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>ros::Publisher m_feedback_publisher</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>double m_kv</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>double m_kh</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>std::pair&lt; double, double &gt; m_location</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>geometry_msgs::Quaternion m_orientation</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>double m_linear_speed</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>double m_angular_speed</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>double m_roll</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>double m_pitch</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>double m_yaw</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>actionlib::SimpleActionServer&lt; bot_msgs::MoveBotAction &gt; m_action_server</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>std::string m_action_name</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bot_msgs::MoveBotGoal m_action_goal</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bot_msgs::MoveBotFeedback m_action_feedback</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bot_msgs::MoveBotResult m_action_result</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>ros::Subscriber m_pose_subscriber</para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        <section>
            <title></title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para> <link linkend="class_bot_action_server_1aab05ee0e99a61687997c358a27555a32">BotActionServer</link> (
ros::NodeHandle * nodehandle, std::string action_name, std::string robot_name)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_bot_action_server_1a48f2c8231440b5057b2685c319d83515">action_server_callback</link> (
const actionlib::SimpleActionServer&lt; bot_msgs::MoveBotAction &gt;::GoalConstPtr &amp; goal)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_bot_action_server_1a3e91308d1567b72b949cd19c63a808b1">stop</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>double <link linkend="class_bot_action_server_1af24acb7dc4e73c24a4c913fd6a521bf0">compute_yaw_rad</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_bot_action_server_1a821f9e38243f2b5ffadfbe62aa3ec1b2">publish_velocities</link> (
const geometry_msgs::Twist &amp; msg)</para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        <section>
            <title></title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_bot_action_server_1a6ebfad0e122a846be9476e09cd7387a3">m_pose_callback</link> (
const nav_msgs::Odometry::ConstPtr &amp; msg)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_bot_action_server_1aef0e0c0b3ba5637a64b6dc6e4cb3c883">m_initialize_subscribers</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_bot_action_server_1ab7fb15ac85fbf368866d9b15151a266e">m_initialize_publishers</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>double <link linkend="class_bot_action_server_1a5b4489d885094387aa0721591e8ffc0e">m_compute_distance</link> (
const std::pair&lt; double, double &gt; &amp; a, const std::pair&lt; double, double &gt; &amp; b)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>double <link linkend="class_bot_action_server_1a588625b3b7fd551afe25e1f63336e40a">m_compute_distance</link> (
double x_1, double y_1, double x_2, double y_2)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_bot_action_server_1a007761a77bfbf0e58a5cc8ba0c94f620">m_move</link> (
double linear, double angular)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>double <link linkend="class_bot_action_server_1a9b495cd4a581372b559f35521bed331d">m_normalize_angle_positive</link> (
double angle)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>double <link linkend="class_bot_action_server_1a17a5ed890220dcb595276c8bc79ab89d">m_normalize_angle</link> (
double angle)</para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        <section>
            <title>Member Data Documentation</title>
        </section>
            <section xml:id="class_bot_action_server_1aab05ee0e99a61687997c358a27555a32">
                <title>BotActionServer::BotActionServer (ros::NodeHandle *nodehandle, std::string action_name, std::string robot_name)</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_bot_action_server_1a48f2c8231440b5057b2685c319d83515">
                <title>void BotActionServer::action_server_callback (const actionlib::SimpleActionServer&lt; bot_msgs::MoveBotAction &gt;::GoalConstPtr &amp;goal)</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_bot_action_server_1a3e91308d1567b72b949cd19c63a808b1">
                <title>void BotActionServer::stop ()</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_bot_action_server_1af24acb7dc4e73c24a4c913fd6a521bf0">
                <title>double BotActionServer::compute_yaw_rad ()</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_bot_action_server_1a821f9e38243f2b5ffadfbe62aa3ec1b2">
                <title>void BotActionServer::publish_velocities (const geometry_msgs::Twist &amp;msg)</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_bot_action_server_1a6ebfad0e122a846be9476e09cd7387a3">
                <title>void BotActionServer::m_pose_callback (const nav_msgs::Odometry::ConstPtr &amp;msg)</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_bot_action_server_1aef0e0c0b3ba5637a64b6dc6e4cb3c883">
                <title>void BotActionServer::m_initialize_subscribers ()</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_bot_action_server_1ab7fb15ac85fbf368866d9b15151a266e">
                <title>void BotActionServer::m_initialize_publishers ()</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_bot_action_server_1a5b4489d885094387aa0721591e8ffc0e">
                <title>double BotActionServer::m_compute_distance (const std::pair&lt; double, double &gt; &amp;a, const std::pair&lt; double, double &gt; &amp;b)</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_bot_action_server_1a588625b3b7fd551afe25e1f63336e40a">
                <title>double BotActionServer::m_compute_distance (double x_1, double y_1, double x_2, double y_2)</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_bot_action_server_1a007761a77bfbf0e58a5cc8ba0c94f620">
                <title>void BotActionServer::m_move (double linear, double angular)</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_bot_action_server_1a9b495cd4a581372b559f35521bed331d">
                <title>double BotActionServer::m_normalize_angle_positive (double angle)</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_bot_action_server_1a17a5ed890220dcb595276c8bc79ab89d">
                <title>double BotActionServer::m_normalize_angle (double angle)</title> <emphasis></emphasis>
                
            </section>
</section>
